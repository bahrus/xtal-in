import{XtalCustomEvent,registerTagName}from'./custom-event.js';const defaultTagName_xtal_in_children='observe-children',canonicalTagName_xtal_in_children='xtal-in-children',watchSubtree='watch-subtree';class ObserveChildren extends XtalCustomEvent{constructor(){super(),this._mutationCount=0,this._isSubClass=!0}static get observedAttributes(){return super.observedAttributes.concat([watchSubtree])}get watchSubtree(){return this._watchSubtree}set watchSubtree(a){a?this.setAttribute(watchSubtree,''):this.removeAttribute(watchSubtree)}attributeChangedCallback(a,b,c){super.attributeChangedCallback(a,b,c);a===watchSubtree?(this._watchSubtree=null!==c,this.disconnect(),this.addMutationObserver()):void 0}disconnect(){this._observer&&this._observer.disconnect()}addMutationObserver(){var a={childList:!0,subtree:this._watchSubtree};this._observer=new MutationObserver((a)=>{a.forEach((a)=>{this.detail={mutation:a}}),this._mutationCount++,this.setValue(this._mutationCount)}),this.detail={status:'observing'},this.setValue(this._mutationCount),this._observer.observe(this,a)}connectedCallback(){super.connectedCallback(),this.addMutationObserver()}disconnedCallback(){this.disconnect()}}registerTagName(defaultTagName_xtal_in_children,ObserveChildren);class XtalInChildren extends ObserveChildren{}customElements.define(canonicalTagName_xtal_in_children,XtalInChildren);