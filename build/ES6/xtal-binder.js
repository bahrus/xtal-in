import{AddEventListener}from"./add-event-listener.js";const passTo="pass-to";class XtalBinder extends AddEventListener{static get is(){return"xtal-binder"}get passTo(){return this._passTo||this.getAttribute("pass-to")}set passTo(a){this.setAttribute("pass-to",a)}static get observedAttributes(){return super.observedAttributes.concat(["pass-to"])}attributeChangedCallback(a,b,c){super.attributeChangedCallback(a,b,c);"pass-to"===a?(this._passTo=c,this.parsePassTo()):void 0}connectedCallback(){super.connectedCallback(),this._upgradeProperties(["passTo"]);this._observer=new MutationObserver(a=>{a.forEach(a=>{a.addedNodes.forEach(a=>{this.cascade(this._lastEvent,a)})})}),this._observer.observe(this.parentElement,{childList:!0,subtree:!0})}disconnectedCallback(){super.disconnectedCallback(),this._observer&&this._observer.disconnect()}parsePassTo(){const a=this._passTo.lastIndexOf("{");if(0>a)return;this._cssSelector=this._passTo.substr(0,a);const b=this._passTo.substring(a+1,this._passTo.length-1),c=b.split(";");this._propMapper={},c.forEach(a=>{const b=a.split(":");this._propMapper[b[0]]=b[1].split(".")})}setValue(a,b){super.setValue(a,b),this._lastEvent=b,this.cascade(b,this.parentElement)}cascade(a,b){this._cssSelector&&this._propMapper&&this.qsa(this._cssSelector,b).forEach(b=>{for(var c in this._propMapper){const d=this._propMapper[c];let e=a;d.forEach(a=>{e&&(e=e[a])}),b[c]=e}})}}customElements.get(XtalBinder.is)||customElements.define(XtalBinder.is,XtalBinder);