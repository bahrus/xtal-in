const defaultTagName='custom-event',canonicalTagName='xtal-in-detail',bubbles='bubbles',composed='composed',dispatch='dispatch',detail='detail',event_name='event-name',debounce_duration='debounce-duration',zoom_in='zoom-in',zoom_out='zoom-out';export function debounce(a,b,c){var d;return function(){var e=this,f=arguments,g=c&&!d;clearTimeout(d),d=setTimeout(function(){d=null,c||a.apply(e,f)},b),g&&a.apply(e,f)}}export class XtalCustomEvent extends HTMLElement{constructor(){super(...arguments),this._debounceDuration=0}get bubbles(){return this._bubbles}set bubbles(a){a?this.setAttribute(bubbles,''):this.removeAttribute(bubbles)}get composed(){return this._composed}set composed(a){a?this.setAttribute(composed,''):this.removeAttribute(composed)}get dispatch(){return this._dispatch}set dispatch(a){a?this.setAttribute(dispatch,''):this.removeAttribute(dispatch)}get detail(){return this._detail}set detail(a){this._detail=a,this._zoomedDetail=this.zoom(this._detail),this.onPropsChange()}get debounceDuration(){return this._debounceDuration}set debounceDuration(a){this.setAttribute(debounce_duration,a.toString())}get eventName(){return this.getAttribute(event_name)}set eventName(a){this.setAttribute(event_name,a)}get zoomIn(){return this.getAttribute(zoom_in)}set zoomIn(a){this.setAttribute(zoom_in,a)}get zoomOut(){return this.getAttribute(zoom_out)}set zoomOut(a){this.setAttribute(zoom_out,a)}zoomInObject(a){if(!this.zoomIn)return a;let b=a;const c=this.zoomIn.split('.');for(let d=0,e=c.length;d<e;d++){const a=c[d];if(b=b[a],!b)return null}return b}zoomOutObject(a){if(!this.zoomOut)return a;let b=a;return this.zoomOut.split('.').forEach(()=>{b={token:b}}),b}zoom(a){return null===a?a:this.zoomInObject(this.zoomOutObject(a))}get value(){return this._value}setValue(a){this._value=a;const b=new CustomEvent('value-changed',{detail:{value:a},bubbles:!0,composed:!1});this.dispatchEvent(b)}onPropsChange(){this._dispatch&&this._detail&&this.eventName&&(this._debounceFunction?this._debounceFunction():this.emitEvent())}emitEvent(){const a=new CustomEvent(this.eventName,{detail:this._zoomedDetail,bubbles:this.bubbles,composed:this.composed});this.dispatchEvent(a),this._isSubClass||this.setValue(a.detail)}static get observedAttributes(){return[bubbles,composed,dispatch,detail,event_name,debounce_duration,zoom_in,zoom_out]}_upgradeProperties(a){a.forEach((a)=>{if(this.hasOwnProperty(a)){let b=this[a];delete this[a],this[a]=b}})}snakeToCamel(a){return a.replace(/(\-\w)/g,function(a){return a[1].toUpperCase()})}connectedCallback(){this._upgradeProperties(XtalCustomEvent.observedAttributes.map((a)=>this.snakeToCamel(a)))}attributeChangedCallback(a,b,c){a===bubbles||a===dispatch||a===composed?this['_'+this.snakeToCamel(a)]=null!==c:a===detail?this._detail=this.zoom(JSON.parse(c)):a===debounce_duration?(this._debounceDuration=parseFloat(c),0<this._debounceDuration&&(this._debounceFunction=debounce(()=>{this.emitEvent()},this._debounceDuration))):void 0;this.onPropsChange()}}function registerTagNameForRealz(a,b){let c=a;const d=document.head.querySelector(`[data-was="${a}"][data-package="npm.xtal-in"]`);if(d){const a=d.dataset.is;a&&(c=a)}customElements.get(c)||customElements.define(c,b)}export function registerTagName(a,b){'loading'===document.readyState?document.addEventListener('DOMContentLoaded',()=>{registerTagNameForRealz(a,b)}):registerTagNameForRealz(a,b)}if(!customElements.get(canonicalTagName)){registerTagName(defaultTagName,XtalCustomEvent);customElements.define(canonicalTagName,class extends XtalCustomEvent{})}