import{XtalInDetail,registerTagName}from'./xtal-in-detail.js';const defaultTagName='observe-attributes',canonicalTagName='xtal-in-attributes',filter='filter';class ObserveAttributes extends XtalInDetail{get filter(){return this._filter}set filter(a){this.setAttribute(filter,JSON.stringify(a))}static get observedAttributes(){return super.observedAttributes.concat([filter])}attributeChangedCallback(a,b,c){super.attributeChangedCallback(a,b,c);a===filter?this._filter=JSON.parse(c):void 0}addMutationObserver(){if(this.disconnect(),!!this._child){const a={attributes:!0,attributeFilter:this._filter};this._observer=new MutationObserver((a)=>{a.forEach((a)=>{this.detail={mutation:a}})}),this._observer.observe(this._child,a)}}getChild(){switch(this.childElementCount){case 0:return void setTimeout(()=>{this.getChild()},100);case 1:this._child=this.firstElementChild,this.addMutationObserver();break;default:console.error('This component only supports a single element child');}}disconnect(){this._observer&&this._observer.disconnect()}connectedCallback(){super.connectedCallback(),this._upgradeProperties([filter]),this.getChild()}}registerTagName(defaultTagName,ObserveAttributes);class XtalInAttributes extends ObserveAttributes{}customElements.define(canonicalTagName,XtalInAttributes);